This file exists to document the train of thoughts that go into design and implementation decisions.

In-class comments and documentation exist to chronicle how things are.

This file exists to chronicle how things got to be that way. Nothing is ever deleted from this file.
If a decision that was made turns out to have been a poor decision, the thought process that went
into the original decision and the "better" subsequent decision remain in the file.

Days/weeks/months/years from now someone, maybe even you yourself, will need to understand why a
decision was made, or whether or not a design/implementation change should be made.

This file should be your go-to place for understanding the thought process that went into the
evolution of the system. And you should document your own thoughts and decisions here.

- Eric C.


Instead of having separate objects for URL requests and responses, we're tying them together in the
same object. This way, interactions can more easily be cached, or at least persisted for longer than
the moment retrieved data gets passed to the caller. Also, in some cases requests return data in
pages. In those cases, we will continue to use the same DataRequestResponse object to manage
subsequent requests for additional pages of data.
- Eric C.

Added the request ID, request data, request type and error to the DataManager delegate method as a
convenience, so delegates can more easily check each response for an ID or type they are waiting for
or care about, more easily get the response data, and more easily tell if the call succeeded, without
having to pull all 3 from the DataRequestResponse object.
- Eric C.

Setting "Immortal" as the lifespan for a PersistenceManager save to memory will not save the data to
a file or user defaults and ressurect it to memory when the app exits and restarts. Immortal lifespan
is meaningless for a to-memory save. A session save to memory is also useless if a session persists
beyond an app exit and restart.
- Eric C.

See no sense in making the RetryManager persist through app restarts. So all retry objects only exist
thorugh the current session.
- Eric C.

"Page" based API calls usually rely on the caller to specify the "page" of data they're requesting.
So the continueMultiPartRequest() method on IoGDataRequestResponse relies on the caller to change
the connection appropriately in order to get the next "page" of data. However, having to dig into
the requestInfo to manually change the connection isn't the most user friendly way to go about it.
In the future a method should be added to update the connection.
- Eric C.

The downside of the IoGDataRequestType enumeration strategy is that it requires either adding
specialized entries for each project, or a ton of generalized entries that each project has to
shoehorn its requests into, or each project has to keep a local version of this project and add
its own values to. Perhaps the architecture needs to be changed to allow for per-project
customization of this mechanism instead of a hardcoded enumeration.
- Eric C.

Would prefer to have IoGDataObjectManager return an empty, but valid object of the requested type if
there is a parsing error, but can't seem to get it to work right with the generics. So, for now, it
returns null on failure for parseObject. However, the parseArray method returns an empty array on
failure.
- Eric C.

Perhaps IoGRetryManager should include a "Cancelled" result. As it stands, if a request is
cancelled, only the party that did the cancellation is aware of it. No other delegates are ever
notified of anything.
- Eric C.

A bug was discovered where creating an expiring persistence value and then after that expiration
adding another expiring item with the same key didn't work. Adding a test to cover this.
- Eric C.
